This is the Beehive Monitoring System (BMS)
designed and created by Evangelos Rokas (c) 2015,2016
Continued major development during 2017
Continued major development during 2018


The BMS is a Arduino-compatible project that monitors the health
of beehives and sends data to an internet server.

Various modules have been used for the creation of the project.

EAGLE Schematic Capture System was used to design the schematics and create
the PCB files.

SeeedStudio website was used to fabricate the initial Rev1 PCBs which were
used to make the prototypes for the BMS.

Arduino Enviroment was used in initial stages in order to settle everything.

Linux operating system was used in the actual project development.

Arduino-Makefile is a project utilizing Arduino Enviroment in order to do
production development under Linux.  Arduino-Makefile project is a work of
others: This makefile was originally created by [Martin Oldfield]
(http://mjo.tc/atelier/2009/02/arduino-cli.html) and he maintained it till
v0.10.2.  From May 2013, it is maintained by [Sudar Muthu]
(http://hardwarefun.com/tutorials/compiling-arduino-sketches-using-makefile)
and [Simon John] (https://github.com/sej7278) with the help of [40+
contributors](https://github.com/sudar/Arduino-Makefile/graphs/contributors).


I2CDev library has been used in order to communicate with the various
modules of the project.



9/2/2017 Evangelos Rokas <evrokas@gmail.com>

This is the come back of the Beehive Monitoring System Project.  Basically,
after half a year of hibernation, I decided to come back to the project in
order to help my father with beekeeping.

RTC														is working
TEMPERATURE/HUMIDIty sensor		is working
ACCELERATOR sensor						is working (movement alert should be implemented)
GPS receiver									is working (software integration is needed to be written)
GSM/GPRS module								is partially working, working on the power of the module which
																is causing restarts even on normal voltage range(!)

After working prototype is ready, a new schematic will be created and new
PCBs will be ordered.


31/3/2018 Evangelos Rokas <evrokas@gmail.com>

As of March 2018 the GSM/GPRS module is actually working, and sending data
to an experimental website, running on Apache, Mysql and PHP.  Data were
gathered and presented in a table and graphical manner using various tools. 
Nevertheless, the website front-end is far from complete, and also the
GSM/GPRS firmware needs to be more stable.  Also, EEPROM data storing is not
complete.  EEPROM data storing is the work which is actually must be done
during this semester.



----- POST data -----

up vote
5
down vote
httpdata=100,10000 means that SIM800 should expect 100 bytes within 10 seconds.

This is how I accomplished this using the HTTP client:

AT+HTTPINIT
AT+HTTPPARA="CID",1
AT+HTTPPARA="URL","http://url.com/endPoint"
AT+HTTPPARA="CONTENT","application/json"
AT+HTTPDATA=40,10000
At this point, the SIM800 should respond with "DOWNLOAD". Which means it's expecting your data. Send in your data; in my case:

{"location_id": 238, "fill_percent": 90}
Wait 10 seconds to send the rest of the commands. Then:

AT+HTTPACTION=1
AT+HTTPREAD
AT+HTTPTERM
That did it for me. Hope it helps.

This is where I got the information from: http://www.raviyp.com/embedded/194-sim900-gprs-http-at-commands


	
answered Dec 9 '15 at 19:12

Alan Alvarez
936
add a comment
up vote
4
down vote
I managed to get it to do what I need, this code-snippet will likely help others

AT+CGATT=1
AT+CIPMUX=0
AT+CSTT="APN","USER","PASS"
AT+CIICR
AT+CIFSR # ip up - gprs working
AT+CIPSHUT # shut down 
# Now do a post request to remote server api in json format. Express server
AT+CIPSTART="TCP","IP_ADDR|DOMAIN","2000"
AT+CIPSEND=119 # Num of char in tcp/ip data, \r & \n count as 1 char
POST /post HTTP/1.1
Host: **.**.***.***
Content-Type: application/json
Content-Length:23

{"postkey":"postvalue"}
Hope this helps the next person stuck on it.


GET /data.php?action=getconf&nodeId=10200 HTTP/1.1
Host: erns.sytes.net:8088
User-Agent: beewatch-firmware/0.1 arduino/1.8.1


30-4-2018
TODO:
* Enable interrupt on change of Serial RX, so to wake up from sleep
when external module is attached to the serial port.

* when waiting for module to register, perform a 3 step procedure, initiate
a variable for 10 secs (this is the most likely the module will registerd),
if in this interval module is not registered, set a flag, and increase the
interval by 10 secs, and go to sleep, for a specified time frame, after
this, try again for network communication



09-06-2018
TODO:
Having a variable for repeating log (or net cycles), seems not to be enough. 
Whenever the module resets, this variable starts over again.  This creates
the problem, that the module might fire in regular but not specific times
(or intervals).

There are 2 solutions:
A.  Add a delay variable so when one reprograms the log/net cycles, the
module must wait for the new 'delay' variable so when it starts cycling in a
known pattern.

B.  Implement an algorithm similar to linux program 'crontab', which
specifies certain intervals (or specific minute/hour criteria) when to fire
log/net cycle.

In this implementation in order to reduce memory usage one can apply a 60
bits variable for minutes and a 24 bit variable for hours (one could add one
more 7 bit variable for days).  When a specific bit is set to '1' then the
event is allowed to fire, in the specific minute:hour(:day) time.  RAM usage
is: 60+24+7 = 91 bits (or 84 if days are not used) which means an extra 12
bytes of memory for each event (12 for Log, 12 for Net).



25-09-2018
Progress
The software is progressing from alpha to beta stage. Soon it will be ready
to do a field test on real enviroment.


* Sending data to the server via POST is ok, this reduced the time needed for
GPRS/GSM connection A LOT (!), it now needs almost 20-30 seconds to send a chunk
of data when it needed almost 200 seconds to send 17 records (!!!). This reduces
a lot battery consumption and increases life capacity.

* An error logging mechanism is began to be created, so errors during operations
are stored in RAM and sent to the server at each connection (or earlier perhaps).

* Maintenance mode is working good (but not perfect yet), you can actually execute
various commands.

* What is very important to implement is a fail safe mechanism that will restart the
module when something goes wrong. In such a case logged records can be lost, but it
is absolutely important for the module to resume normal operation.
